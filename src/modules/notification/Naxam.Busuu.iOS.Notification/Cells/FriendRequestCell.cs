// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Globalization;
using CoreAnimation;
using CoreGraphics;
using Foundation;
using MvvmCross.Binding.BindingContext;
using MvvmCross.Binding.iOS.Views;
using MvvmCross.Platform.Converters;
using Naxam.Busuu.Core.Models;
using Naxam.Busuu.iOS.Core.Converter;
using UIKit;

namespace Naxam.Busuu.iOS.Notification.Cells
{
    public class AlphaBtnConverter : MvxValueConverter<bool, nfloat>
	{
        protected override nfloat Convert(bool value, Type targetType, object parameter, CultureInfo culture)
		{
            if (!value)
                return 1;

            return 0;
		}
	}
	
    public class CenterBtnYesConverter : MvxValueConverter<bool, nfloat>
	{
        protected override nfloat Convert(bool value, Type targetType, object parameter, CultureInfo culture)
		{
            if (!value) 
            {
                return 16;
            }
            return -30;
		}
	}

	public partial class FriendRequestCell : MvxTableViewCell
	{
        public event EventHandler<FriendRequestModel> ViewFriendsYesHandler;
        public event EventHandler<FriendRequestModel> ViewFriendsNoHandler;

        readonly MvxImageViewLoader _loaderImageUser;

        UIImage imgTickBlue;
        UIImage imgTickGrey;
        UIImage imgCrossBlack;
        UIImage imgCrossGrey;

		public FriendRequestCell (IntPtr handle) : base (handle)
		{
			_loaderImageUser = new MvxImageViewLoader(() => this.imgUser);
			_loaderImageUser.DefaultImagePath = "res:user_avatar_placeholder.png";
             
			this.DelayBind(() =>
			{
                var setBinding = this.CreateBindingSet<FriendRequestCell, FriendRequestModel>();
                setBinding.Bind(_loaderImageUser).To(n => n.User.Photo);
                setBinding.Bind(lblUserName).To(n => n.User.Name);
                setBinding.Bind(btnYesTrailingConstraint).For(n => n.Constant).To(n => n.RejectFriend).WithConversion(new CenterBtnYesConverter());
                setBinding.Bind(imgYes).For(n => n.Hidden).To(n => n.RejectFriend).WithConversion(nameof(VisibilityToHideConverter));
                setBinding.Bind(btnYes).For(n => n.Alpha).To(n => n.IsFriend).WithConversion(new AlphaBtnConverter());
                setBinding.Bind(imgNo).For(n => n.Hidden).To(n => n.IsFriend).WithConversion(nameof(VisibilityToHideConverter));
				setBinding.Apply();
			});
		}

        public override void AwakeFromNib()
        {
            base.AwakeFromNib();

            imgUser.Layer.CornerRadius = imgUser.Bounds.Width / 2;

            imgTickBlue = UIImage.FromFile("tick_blue_circle.png");
            imgTickGrey = UIImage.FromFile("tick_grey_circle.png");

            imgCrossBlack = UIImage.FromFile("cross_black_circle.png");
			imgCrossGrey = UIImage.FromFile("cross_grey_circle.png");
		}

        partial void btnYes_TouchUpInside(NSObject sender)
        {
            btnYes.SetImage(imgTickBlue, UIControlState.Normal);
            
			var scaleAnimation = CABasicAnimation.FromKeyPath("transform");
			scaleAnimation.Duration = 0.35;
			scaleAnimation.TimingFunction = CAMediaTimingFunction.FromName(CAMediaTimingFunction.EaseInEaseOut);
			scaleAnimation.From = NSValue.FromCATransform3D(CATransform3D.MakeScale(0.0001f, 0.0001f, 0.0001f));
			scaleAnimation.To = NSValue.FromCATransform3D(CATransform3D.MakeScale(1, 1, 1));
			scaleAnimation.RemovedOnCompletion = true;
			scaleAnimation.AnimationStopped -= btnYesHandleEventHandler;
			scaleAnimation.AnimationStopped += btnYesHandleEventHandler;

            btnYes.Layer.AddAnimation(scaleAnimation, "btnYes_zoom_scale_animation");
        }

		void btnYesHandleEventHandler(object sender, CAAnimationStateEventArgs e)
		{
            UIView.Animate(0.35, 0, UIViewAnimationOptions.CurveEaseIn | UIViewAnimationOptions.CurveLinear, () =>
			{
				btnYes.Center = new CGPoint(btnNo.Center);
            }, btnYes_HandleAction);
		}

		void btnYes_HandleAction()
		{
            btnYes.Center = new CGPoint(btnNo.Center);

            ViewFriendsYesHandler?.Invoke(this, (FriendRequestModel)DataContext);
            btnYes.SetImage(imgTickGrey, UIControlState.Normal);
		}

		partial void btnNo_TouchUpInside(NSObject sender)
        {
            btnNo.SetImage(imgCrossBlack, UIControlState.Normal);

			var scaleAnimation = CABasicAnimation.FromKeyPath("transform");
			scaleAnimation.Duration = 0.35;
			scaleAnimation.TimingFunction = CAMediaTimingFunction.FromName(CAMediaTimingFunction.EaseInEaseOut);
			scaleAnimation.From = NSValue.FromCATransform3D(CATransform3D.MakeScale(0, 0, 0));
			scaleAnimation.To = NSValue.FromCATransform3D(CATransform3D.MakeScale(1, 1, 1));
			scaleAnimation.RemovedOnCompletion = true;
			scaleAnimation.AnimationStopped -= btnNoHandleEventHandler;
			scaleAnimation.AnimationStopped += btnNoHandleEventHandler;

            btnNo.Layer.AddAnimation(scaleAnimation, "btnNo_zoom_scale_animation");
        }
		
		void btnNoHandleEventHandler(object sender, CAAnimationStateEventArgs e)
		{
            
			var scaleAnimation = CABasicAnimation.FromKeyPath("transform");
			scaleAnimation.Duration = 0.35;
			scaleAnimation.TimingFunction = CAMediaTimingFunction.FromName(CAMediaTimingFunction.EaseInEaseOut);
			scaleAnimation.From = NSValue.FromCATransform3D(CATransform3D.MakeScale(1, 1, 1));
			scaleAnimation.To = NSValue.FromCATransform3D(CATransform3D.MakeScale(0, 0, 0));
			scaleAnimation.RemovedOnCompletion = true;
			
			btnYes.Layer.AddAnimation(scaleAnimation, "btnNo_scale_animation");

			ViewFriendsNoHandler?.Invoke(this, (FriendRequestModel)DataContext);
            btnNo.SetImage(imgCrossGrey, UIControlState.Normal);
		}
	}
}
