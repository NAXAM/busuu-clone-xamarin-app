using System; using System.Collections.Generic; using System.Linq; using System.Text;  using Android.App; using Android.Content; using Android.OS; using Android.Runtime; using Android.Views; using Android.Widget; using Android.Support.Design.Widget; using Android.Util; using Naxam.Busuu.Droid.Core.Utils; using Java.Lang;  namespace Naxam.Busuu.Droid.Profile.Behavior {     [Android.Runtime.Register("Naxam.Busuu.Droid.Profile.Behavior.AvatarBehavior")]     public class AvatarBehavior : CoordinatorLayout.Behavior     {         private Context Context;          public float StartPosition;         public int StartXPosition;         public float StartToolbarPosition;         public int StartYPosition;         public int FinalYPosition;         public int StartHeight;         public int FinalXPosition;         public float ChangeBehaviorPoint;         private float CustomFinalHeight;         public AvatarBehavior(Context contex) : base()         {             Context = contex;         }          public AvatarBehavior(Context contex, IAttributeSet attrs) : base()         {             Context = contex;         }          public override bool LayoutDependsOn(CoordinatorLayout parent, Java.Lang.Object child, View dependency)         {             return dependency.GetType() == typeof(Android.Support.V7.Widget.Toolbar);         }            public override bool OnDependentViewChanged(CoordinatorLayout parent, Java.Lang.Object child, View dependency)         {             ImageView imgAvatar = (ImageView)child;             InitProperties(imgAvatar, dependency);             CustomFinalHeight = Util.PxFromDp(Context, 32);             int maxScrollDistance = (int)(StartToolbarPosition);             float expandedPercentageFactor = dependency.GetY() / maxScrollDistance;              if (expandedPercentageFactor < ChangeBehaviorPoint)             {                 float heightFactor = (ChangeBehaviorPoint - expandedPercentageFactor) / ChangeBehaviorPoint;                  float distanceXToSubtract = ((StartXPosition - FinalXPosition)  * heightFactor) + (imgAvatar.Height / 2);                 float distanceYToSubtract = ((StartYPosition - FinalYPosition) * (1f - expandedPercentageFactor)) + (imgAvatar.Height / 2);                   imgAvatar.SetX(StartXPosition - distanceXToSubtract);                   imgAvatar.SetY(StartYPosition - distanceYToSubtract);                  float heightToSubtract = ((StartHeight - CustomFinalHeight) * heightFactor);                  CoordinatorLayout.LayoutParams lp = (CoordinatorLayout.LayoutParams)imgAvatar.LayoutParameters;                 lp.Width = (int)(StartHeight - heightToSubtract);                 lp.Height = (int)(StartHeight - heightToSubtract);                 imgAvatar.LayoutParameters = lp;              }             else             {                 float distanceYToSubtract = ((StartYPosition - FinalYPosition)                         * (1f - expandedPercentageFactor)) + (StartHeight / 2);                  imgAvatar.SetX(StartXPosition - imgAvatar.Width / 2);                 imgAvatar.SetY(StartYPosition - distanceYToSubtract);                  CoordinatorLayout.LayoutParams lp = (CoordinatorLayout.LayoutParams)imgAvatar.LayoutParameters;                 lp.Width = (int)(StartHeight);                 lp.Height = (int)(StartHeight);                 imgAvatar.LayoutParameters = lp;             }             return true;         }          private void InitProperties(ImageView child, View dependency)         {
            StartYPosition = StartYPosition == 0 ? (int)(dependency.GetY()) : StartYPosition;             FinalYPosition = FinalYPosition == 0 ? (int)Util.PxFromDp(Context, 28) : FinalYPosition;             StartHeight = StartHeight == 0 ? child.Height : StartHeight;             StartXPosition = StartXPosition == 0 ? (int)(child.GetX() + child.Width / 2) : StartXPosition;             FinalXPosition = FinalXPosition == 0 ? (int)Util.PxFromDp(Context, 28) + ((int)CustomFinalHeight / 2) : FinalXPosition;             StartToolbarPosition = StartToolbarPosition == 0 ? dependency.GetY() : StartToolbarPosition;             ChangeBehaviorPoint = ChangeBehaviorPoint == 0 ? 1 : ChangeBehaviorPoint;         }     } }