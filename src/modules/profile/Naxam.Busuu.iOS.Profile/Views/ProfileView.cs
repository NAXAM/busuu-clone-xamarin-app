// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Drawing;
using CoreAnimation;
using CoreGraphics;
using ObjCRuntime;
using FFImageLoading;
using FFImageLoading.Work;
using Foundation;
using MvvmCross.Binding.BindingContext;
using MvvmCross.iOS.Views;
using MvvmCross.iOS.Views.Presenters.Attributes;
using Naxam.Busuu.iOS.Profile.Common;
using Naxam.Busuu.Profile.ViewModels;
using UIKit;

namespace Naxam.Busuu.iOS.Profile.Views
{
    [MvxFromStoryboard(StoryboardName = "Profile")]
    [MvxTabPresentation(WrapInNavigationController = true, TabIconName = "profile_tab_icon", TabName = "Me", TabSelectedIconName = "profile_tab_icon_selected")]
    public partial class ProfileView : MvxViewController<ProfileViewModel>, IUITableViewDelegate, IUIScrollViewDelegate
	{
        nfloat offset_HeaderStop = 140 - 64;
        nfloat distance_W_LabelHeader = 32.25f;
        UIView headerProfileView;
        UIImageView headerImageView;
        ProfileTableViewSource pSource;
        UIImagePickerController imagePicker;

		public ProfileView (IntPtr handle) : base (handle)
		{
		}

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            this.NavigationController.NavigationBarHidden = true;

            imgLanLearn.Layer.BorderWidth = 2.5f;
            imgLanLearn.Layer.CornerRadius = imgLanLearn.Bounds.Height / 2;
            imgLanLearn.Layer.BorderColor = UIColor.White.CGColor;

            headerView.Frame = new CGRect(0, 0, UIScreen.MainScreen.Bounds.Width, 140);

            imgLan.Layer.CornerRadius = imgLan.Bounds.Height / 2;

			imgUser.Layer.CornerRadius = imgAvatar.Bounds.Height / 2;

            imgUser.Layer.BorderWidth = 2;
            imgUser.Layer.BorderColor = UIColor.White.CGColor;
           
            imgAvatar.Layer.CornerRadius = imgAvatar.Bounds.Height / 2;

            btnImgUser.Layer.CornerRadius = btnImgUser.Bounds.Height / 2;

            popupMenuPhoto.Layer.ShadowRadius = 3;
			popupMenuPhoto.Layer.ShadowOpacity = 0.3f;
			popupMenuPhoto.Layer.ShadowOffset = new CGSize(0, 3);

            ImageService.Instance.LoadUrl(this.ViewModel.User.Photo).
						ErrorPlaceholder("user_avatar_placeholder.png", ImageSource.ApplicationBundle).
						LoadingPlaceholder("user_avatar_placeholder.png", ImageSource.ApplicationBundle).
							Into(imgAvatar);

            headerLabel.Text = handleLabel.Text = this.ViewModel.User.Name;

            lblCountry.Text = this.ViewModel.User.Country.Country;

            lblLearnLan.Text = "Speaks English natively. Learning English, German, French and Spanish.";

			var firstAttributes = new UIStringAttributes
			{
				Font = UIFont.BoldSystemFontOfSize(13f)
			};

			var prettyString = new NSMutableAttributedString(lblLearnLan.Text);

            string Lan1 = "English";
            string Lan2 = "German";
            string Lan3 = "French";
            string Lan4 = "Spanish";

            int uLan1 = lblLearnLan.Text.IndexOf(Lan1);
            int uLan2 = lblLearnLan.Text.IndexOf(Lan2);
            int uLan3 = lblLearnLan.Text.IndexOf(Lan3);
            int uLan4 = lblLearnLan.Text.IndexOf(Lan4);
            int uLan5 = lblLearnLan.Text.IndexOf(Lan1, uLan1 + Lan1.Length);

            prettyString.SetAttributes(firstAttributes.Dictionary, new NSRange(uLan1, Lan1.Length));
            prettyString.SetAttributes(firstAttributes.Dictionary, new NSRange(uLan2, Lan2.Length));
            prettyString.SetAttributes(firstAttributes.Dictionary, new NSRange(uLan3, Lan3.Length));
            prettyString.SetAttributes(firstAttributes.Dictionary, new NSRange(uLan4, Lan4.Length));
            prettyString.SetAttributes(firstAttributes.Dictionary, new NSRange(uLan5, Lan1.Length));

            lblLearnLan.AttributedText = prettyString;

            pSource = new ProfileTableViewSource(ProfileTableView);

            var setBinding = this.CreateBindingSet<ProfileView, ProfileViewModel>();

            setBinding.Bind(pSource).To(vm => vm.Exercises);
            //setBinding.Bind(pSource).For(nameof(ProfileTableViewSource.ViewProfileCommand)).To(vm => vm.ViewProfileCommand);
            setBinding.Bind(btnPreference).To(vm => vm.SettingCommand);
            setBinding.Bind(btnFriendList).To(vm => vm.SelectFriendCommand);
            setBinding.Apply();

            ProfileTableView.RowHeight = UITableView.AutomaticDimension;
            ProfileTableView.EstimatedRowHeight = 210f;

            ProfileTableView.Source = pSource;

            ProfileTableView.WeakDelegate = this;

            ProfileTableView.ContentInset = new UIEdgeInsets(headerView.Frame.Height, 0, 0, 0);

			imagePicker = new UIImagePickerController();
			imagePicker.SourceType = UIImagePickerControllerSourceType.PhotoLibrary;
			imagePicker.MediaTypes = UIImagePickerController.AvailableMediaTypes(UIImagePickerControllerSourceType.PhotoLibrary);
			imagePicker.FinishedPickingMedia += Handle_FinishedPickingMedia;
			imagePicker.Canceled += Handle_Canceled;

			// Header - Image

			headerImageView = new UIImageView(headerView.Bounds);

			if (headerImageView != null)
			{
				//headerImageView.Image = new UIImage("w-3894.jpg");
				ImageService.Instance.LoadUrl(this.ViewModel.User.Photo).
						ErrorPlaceholder("w-3894.jpg", ImageSource.ApplicationBundle).
						LoadingPlaceholder("w-3894.jpg", ImageSource.ApplicationBundle).
							Into(headerImageView);
				headerImageView.ContentMode = UIViewContentMode.ScaleAspectFill;
			}

			headerView.InsertSubviewBelow(headerImageView, headerLabel);

			// Header - Blurred Image
			headerProfileView = new UIView(headerView.Bounds);

			if (headerProfileView != null)
			{
				headerProfileView.BackgroundColor = UIColor.FromRGB(57, 169, 246);
				headerProfileView.Alpha = 0;
			}

			headerView?.InsertSubviewBelow(headerProfileView, headerLabel);

			headerView.ClipsToBounds = true;
        }

		public override void ViewWillAppear(bool animated)
		{
			base.ViewWillAppear(animated);

			this.NavigationController.NavigationBarHidden = true;
		}

		[Export("tableView:viewForHeaderInSection:")]
		public UIView GetViewForHeader(UITableView tableView, nint section)
		{
            var root = new UIView(new CGRect(0, 0, UIScreen.MainScreen.Bounds.Width ,44));
			root.BackgroundColor = UIColor.FromRGB(234, 237, 243);

			var lbl = new UILabel();
            lbl.Frame = new CGRect(0, 0, 320, 20);
            lbl.TextColor = UIColor.FromRGB(173, 182, 188);
            lbl.Text = "Completed " + this.ViewModel.Exercises.Count + " conversation exercise";
			lbl.Font = UIFont.SystemFontOfSize(14f);
            lbl.Center = root.Center;
            lbl.TextAlignment = UITextAlignment.Center;

			root.AddSubview(lbl);

			return root;		
		}

        [Export("tableView:heightForHeaderInSection:")]
        public nfloat GetHeightForHeader(UITableView tableView, nint section)
        {
            return 44;
        }

        public override void DidReceiveMemoryWarning()
        {
            base.DidReceiveMemoryWarning();
        }

        partial void btnImgUser_TouchUpInside(NSObject sender)
        {
            popupMenuPhoto.Hidden = !popupMenuPhoto.Hidden;
        }

        partial void btnShowPhoto_TouchUpInside(NSObject sender)
        {
            popupMenuPhoto.Hidden = !popupMenuPhoto.Hidden;

			var showUserAvatarView = UIStoryboard.FromName("Profile", NSBundle.MainBundle).InstantiateViewController("ShowUserAvatarView");

			this.NavigationController.PushViewController(showUserAvatarView, true);
		}

        partial void btnChangePhoto_TouchUpInside(NSObject sender)
        {
            popupMenuPhoto.Hidden = !popupMenuPhoto.Hidden;

			UIAlertController actionSheetAlert = UIAlertController.Create("Change profile picture", "", UIAlertControllerStyle.ActionSheet);
            		
            actionSheetAlert.AddAction(UIAlertAction.Create("From the Gallery", UIAlertActionStyle.Default, ChooseGalleryHandleAction));

            actionSheetAlert.AddAction(UIAlertAction.Create("From the Camera", UIAlertActionStyle.Default, ChooseCameraHandleAction));

            actionSheetAlert.AddAction(UIAlertAction.Create("Cancel", UIAlertActionStyle.Destructive, (action) => Console.WriteLine("Cancel button pressed.")));
            	
			UIPopoverPresentationController presentationPopover = actionSheetAlert.PopoverPresentationController;
			if (presentationPopover != null)
			{
				presentationPopover.SourceView = this.View;
				presentationPopover.PermittedArrowDirections = UIPopoverArrowDirection.Up;
			}

			this.PresentViewController(actionSheetAlert, true, null);
        }

        partial void btnMyExercises_TouchUpInside(NSObject sender)
        {

        }

        partial void btnMyCorrections_TouchUpInside(NSObject sender)
        {
			var alert = UIAlertController.Create("My Correction", "", UIAlertControllerStyle.Alert);
			alert.AddAction(UIAlertAction.Create("Ok", UIAlertActionStyle.Default, null));
			PresentViewController(alert, true, null);
		}

		[Export("scrollViewDidScroll:")]
		public void Scrolled(UIScrollView scrollView)
        {
            var offset = scrollView.ContentOffset.Y + headerView.Bounds.Height;

            var avatarTransform = CATransform3D.Identity;

            var headerTransform = CATransform3D.Identity;

		    // PULL DOWN -----------------

            if (offset < 0)
            {
                nfloat headerScaleFactor = -(offset) / headerView.Bounds.Height;
                var headerSizevariation = ((headerView.Bounds.Height * (1.0f + headerScaleFactor)) - headerView.Bounds.Height) / 2;
                headerTransform = CATransform3D.MakeTranslation(0, headerSizevariation, 0);
                headerTransform = CATransform3D.MakeScale(1 + headerScaleFactor, 1 + headerScaleFactor, 0);

                // Hide views if scrolled super fast

                headerView.Layer.ZPosition = 0;

                headerLabel.Hidden = true;
		    }

			// SCROLL UP/DOWN ------------

			else
			{
                // Header -----------

                headerTransform = CATransform3D.MakeTranslation(0, (nfloat)Math.Max(-offset_HeaderStop, -offset), 0);

                //  ------------ Label

                headerLabel.Hidden = false;

                var alignToNameLabel = -offset + handleLabel.Frame.Y + headerView.Frame.Height + offset_HeaderStop;

                var frame = headerLabel.Frame;
                frame.X = headerLabel.Frame.X;
                frame.Y = (nfloat)Math.Max(alignToNameLabel, distance_W_LabelHeader + offset_HeaderStop);
                headerLabel.Frame = frame;

                //  ------------ Blur

                if (headerProfileView != null)
                {
                    headerProfileView.Alpha = (nfloat)Math.Min(1.0, (offset - alignToNameLabel) / distance_W_LabelHeader);
                }

                // Avatar -----------

                var avatarScaleFactor = (nfloat)(Math.Min(offset_HeaderStop, offset)) / imgAvatar.Bounds.Height / 9.4f; // Slow down the animation
                //System.Diagnostics.Debug.WriteLine(avatarScaleFactor);
                //print(avatarScaleFactor)

                var avatarSizeVariation = ((imgAvatar.Bounds.Height * (1.0f + avatarScaleFactor)) - imgAvatar.Bounds.Height) / 2.0f;
				//System.Diagnostics.Debug.WriteLine(avatarSizeVariation);
                //print(avatarSizeVariation)

                avatarTransform = CATransform3D.MakeTranslation(0, avatarSizeVariation, 0);

                avatarTransform = CATransform3D.MakeScale(1.0f - avatarScaleFactor, 1.0f - avatarScaleFactor, 0);


                if (offset <= offset_HeaderStop)
                {
                    if (imgAvatar.Layer.ZPosition < headerView.Layer.ZPosition)
                    {
                        headerView.Layer.ZPosition = 0;
                    }
				}
			    else
			    {
                    if (imgAvatar.Layer.ZPosition >= headerView.Layer.ZPosition)
                    {
                        headerView.Layer.ZPosition = 2;
                    }
				}
			}

			// Apply Transformations
			headerView.Layer.Transform = headerTransform;

            var segmentViewOffset = profileView.Frame.Height - viewBarItem.Frame.Height - offset;

            var segmentTransform = CATransform3D.Identity;

            // Scroll the segment view until its offset reaches the same offset at which the header stopped shrinking
            segmentTransform = CATransform3D.MakeTranslation(0, (nfloat)Math.Max(segmentViewOffset, -offset_HeaderStop), 0);

            if (segmentTransform.m42 < -75)
            {
				viewBarItem.Layer.ShadowRadius = 2;
				viewBarItem.Layer.ShadowOffset = new CGSize(0, 2);
				viewBarItem.Layer.ShadowOpacity = 0.25f;
            }
            else
            {
				viewBarItem.Layer.ShadowRadius = 0;
				viewBarItem.Layer.ShadowOffset = new CGSize(0, 0);
				viewBarItem.Layer.ShadowOpacity = 0;
            }

            viewBarItem.Layer.Transform = segmentTransform;

            // Set scroll view insets just underneath the segment control
            ProfileTableView.ScrollIndicatorInsets = new UIEdgeInsets(viewBarItem.Frame.GetMaxY(), 0, 0, 0);
		}

        void ChooseGalleryHandleAction(UIAlertAction obj)
        {
			imagePicker.SourceType = UIImagePickerControllerSourceType.PhotoLibrary;
			imagePicker.MediaTypes = UIImagePickerController.AvailableMediaTypes(UIImagePickerControllerSourceType.PhotoLibrary);

            NavigationController.PresentModalViewController(imagePicker, true);
        }

		void Handle_FinishedPickingMedia(object sender, UIImagePickerMediaPickedEventArgs e)
		{
			// determine what was selected, video or image
			bool isImage = false;
			switch (e.Info[UIImagePickerController.MediaType].ToString())
			{
				case "public.image":
					Console.WriteLine("Image selected");
					isImage = true;
					break;
				case "public.video":
					Console.WriteLine("Video selected");
					break;
			}

			// get common info (shared between images and video)
			NSUrl referenceURL = e.Info[new NSString("UIImagePickerControllerReferenceUrl")] as NSUrl;
			if (referenceURL != null)
				Console.WriteLine("Url:" + referenceURL.ToString());

			// if it was an image, get the other image info
			if (isImage)
			{
				// get the original image
				UIImage originalImage = e.Info[UIImagePickerController.OriginalImage] as UIImage;
				if (originalImage != null)
				{
					// do something with the image
					Console.WriteLine("got the original image");
                    imgAvatar.Image = originalImage; // display
				}
			}
			else
			{ // if it's a video
			  // get video url
				NSUrl mediaURL = e.Info[UIImagePickerController.MediaURL] as NSUrl;
				if (mediaURL != null)
				{
					Console.WriteLine(mediaURL.ToString());
				}
			}
			// dismiss the picker
			//imagePicker.DismissModalViewControllerAnimated(true);
			imagePicker.DismissViewControllerAsync(true);
		}

		void Handle_Canceled(object sender, EventArgs e)
		{
			//imagePicker.DismissModalViewControllerAnimated(true);
			imagePicker.DismissViewControllerAsync(true);
		}

        void ChooseCameraHandleAction(UIAlertAction obj)
        {
			if (UIImagePickerController.IsSourceTypeAvailable(UIImagePickerControllerSourceType.Camera))
			{
                imagePicker.SourceType = UIImagePickerControllerSourceType.Camera;
				imagePicker.MediaTypes = UIImagePickerController.AvailableMediaTypes(UIImagePickerControllerSourceType.Camera);

				NavigationController.PresentModalViewController(imagePicker, true);
			}
            else
            {
				var alert = UIAlertController.Create("Change profile picture", "My device no support camera!", UIAlertControllerStyle.Alert);
				alert.AddAction(UIAlertAction.Create("Ok", UIAlertActionStyle.Default, null));
				PresentViewController(alert, true, null);
            }
        }
    }
}
