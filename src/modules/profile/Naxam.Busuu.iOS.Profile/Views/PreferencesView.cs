// This file has been autogenerated from a class added in the UI designer.

using System;
using System.IO;
using CoreGraphics;
using FFImageLoading;
using FFImageLoading.Work;
using Foundation;
using MvvmCross.Binding.BindingContext;
using MvvmCross.iOS.Views;
using MvvmCross.iOS.Views.Presenters.Attributes;
using Naxam.Busuu.iOS.Profile.Common;
using Naxam.Busuu.Profile.ViewModels;
using Naxam.Busuu.iOS.Core.Converter;
using UIKit;
using Naxam.Busuu.Core.Converter;

namespace Naxam.Busuu.iOS.Profile.Views
{
    [MvxFromStoryboard(StoryboardName = "Profile")]
	[MvxModalPresentation(WrapInNavigationController = true)]
	public partial class PreferencesView : MvxViewController<ProfileSettingViewModel>
	{
        UIImagePickerController imagePicker;
        MvxViewController stView;
        string startTextView;
        bool inputUserName;
        bool inputAboutMe;

        MyRadioButton rBtnMale;
        MyRadioButton rBtnFemale;
        MyRadioButton rBtnUndisclosed;
        UIAlertController textInputAlertController;

		public PreferencesView (IntPtr handle) : base (handle)
		{
		}

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            this.NavigationController.NavigationBarHidden = true;


            stView = (MvxViewController)UIStoryboard.FromName("Start", NSBundle.MainBundle).InstantiateViewController("StartPageView");

            viewBar.Layer.ShadowRadius = viewAppBarS.Layer.ShadowRadius = 2;
            viewBar.Layer.ShadowOpacity = viewAppBarS.Layer.ShadowOpacity = 0.25f;
            viewBar.Layer.ShadowOffset = viewAppBarS.Layer.ShadowOffset = new CGSize(0, 2);

            imgUser.Layer.CornerRadius = imgUser.Bounds.Width / 2;

			ImageService.Instance.LoadUrl("https://scontent.fhan2-1.fna.fbcdn.net/v/t1.0-9/16508930_1170067123106485_5721616632039463605_n.jpg?oh=4dc4296fe19f805057c4ff9834f10224&oe=5A342AE1").
					   ErrorPlaceholder("user_avatar_placeholder.png", ImageSource.ApplicationBundle).
					   LoadingPlaceholder("user_avatar_placeholder.png", ImageSource.ApplicationBundle).
                        Into(imgUser);

            var setBinding = this.CreateBindingSet<PreferencesView, ProfileSettingViewModel>();
            setBinding.Bind(btnBack).To(vm => vm.GoBackCommand);
            setBinding.Bind(btnNotifications).To(vm => vm.NotificationSettingViewCommand);
            setBinding.Bind(btnContactUs).To(vm => vm.ContactUsViewCommand);
            setBinding.Bind(btnItWorks).To(vm => vm.ItWorksViewCommand);
            setBinding.Bind(btnCountry).To(vm => vm.EditCountryCommand);
            setBinding.Bind(lblUserName).To(vm => vm.User.Name);
            setBinding.Bind(lblUserCountry).To(vm => vm.User.Country.Country);
            setBinding.Bind(btnInterfaceLanguage).To(vm => vm.EditInterfaceLanguageCommand);
            setBinding.Bind(lblInterfaceLanguage).To(vm => vm.User.interfaceLanguage.Language);
            setBinding.Bind(lblISpeak).To(vm => vm.User.SpeakLanguages).WithConversion(nameof(SpeakLanguageToTextConverter));
            setBinding.Bind(btnISpeak).To(vm => vm.EditLanguageSpeakCommand);
            setBinding.Apply();

			imagePicker = new UIImagePickerController();
			imagePicker.SourceType = UIImagePickerControllerSourceType.PhotoLibrary;
			imagePicker.MediaTypes = UIImagePickerController.AvailableMediaTypes(UIImagePickerControllerSourceType.PhotoLibrary);
			imagePicker.FinishedPickingMedia += Handle_FinishedPickingMedia;
			imagePicker.Canceled += Handle_Canceled;

            textViewInput.ShouldChangeText = HandleUITextViewChange;

			rBtnMale = new MyRadioButton(new CGPoint(0, 0), "Male");
			rBtnFemale = new MyRadioButton(new CGPoint(0, 0), "Female");
		    rBtnUndisclosed = new MyRadioButton(new CGPoint(0, 0), "Undisclosed");
            rBtnUndisclosed.State = true;
        }

		public override void ViewWillAppear(bool animated)
		{
			base.ViewWillAppear(animated);

            this.NavigationController.NavigationBarHidden = true;
		}

        partial void btnLogout_TouchUpInside(NSObject sender)
        {
			var documents = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);
			var directoryname = Path.Combine(documents, "MySettingDocuments");
			Directory.CreateDirectory(directoryname);

			var seedFile = Path.Combine(directoryname, "fileCheckLogin.txt");
			File.WriteAllText(seedFile, "1");

            this.NavigationController.PushViewController(stView, true);
        }

        partial void btnPhoto_TouchUpInside(Foundation.NSObject sender)
        {
			UIAlertController actionSheetAlert = UIAlertController.Create("Change profile picture", "", UIAlertControllerStyle.ActionSheet);

			actionSheetAlert.AddAction(UIAlertAction.Create("From the Gallery", UIAlertActionStyle.Default, ChooseGalleryHandleAction));

			actionSheetAlert.AddAction(UIAlertAction.Create("From the Camera", UIAlertActionStyle.Default, ChooseCameraHandleAction));

			actionSheetAlert.AddAction(UIAlertAction.Create("Cancel", UIAlertActionStyle.Destructive, (action) => Console.WriteLine("Cancel button pressed.")));

			UIPopoverPresentationController presentationPopover = actionSheetAlert.PopoverPresentationController;
			if (presentationPopover != null)
			{
				presentationPopover.SourceView = this.View;
				presentationPopover.PermittedArrowDirections = UIPopoverArrowDirection.Up;
			}

			this.PresentViewController(actionSheetAlert, true, null);
        }

	    void Handle_FinishedPickingMedia(object sender, UIImagePickerMediaPickedEventArgs e)
		{
			// determine what was selected, video or image
			bool isImage = false;
			switch (e.Info[UIImagePickerController.MediaType].ToString())
			{
				case "public.image":
					Console.WriteLine("Image selected");
					isImage = true;
					break;
				case "public.video":
					Console.WriteLine("Video selected");
					break;
			}

			// get common info (shared between images and video)
			NSUrl referenceURL = e.Info[new NSString("UIImagePickerControllerReferenceUrl")] as NSUrl;
			if (referenceURL != null)
				Console.WriteLine("Url:" + referenceURL.ToString());

			// if it was an image, get the other image info
			if (isImage)
			{
				// get the original image
				UIImage originalImage = e.Info[UIImagePickerController.OriginalImage] as UIImage;
				if (originalImage != null)
				{
					// do something with the image
					Console.WriteLine("got the original image");
                    imgUser.Image = originalImage; // display
				}
			}
			else
			{ // if it's a video
			  // get video url
				NSUrl mediaURL = e.Info[UIImagePickerController.MediaURL] as NSUrl;
				if (mediaURL != null)
				{
					Console.WriteLine(mediaURL.ToString());
				}
			}
			// dismiss the picker
			//imagePicker.DismissModalViewControllerAnimated(true);
            imagePicker.DismissViewControllerAsync(true);
		}

		void ChooseGalleryHandleAction(UIAlertAction obj)
		{
			imagePicker.SourceType = UIImagePickerControllerSourceType.PhotoLibrary;
			imagePicker.MediaTypes = UIImagePickerController.AvailableMediaTypes(UIImagePickerControllerSourceType.PhotoLibrary);

			NavigationController.PresentModalViewController(imagePicker, true);
		}

		void ChooseCameraHandleAction(UIAlertAction obj)
		{
			if (UIImagePickerController.IsSourceTypeAvailable(UIImagePickerControllerSourceType.Camera))
			{
				imagePicker.SourceType = UIImagePickerControllerSourceType.Camera;
                imagePicker.MediaTypes = UIImagePickerController.AvailableMediaTypes(UIImagePickerControllerSourceType.Camera);
				NavigationController.PresentModalViewController(imagePicker, true);	
            }
			else
			{
				var alert = UIAlertController.Create("Change profile picture", "My device no support camera!", UIAlertControllerStyle.Alert);
				alert.AddAction(UIAlertAction.Create("Ok", UIAlertActionStyle.Default, null));
				PresentViewController(alert, true, null);
			}
		}

		void Handle_Canceled(object sender, EventArgs e)
		{
			//imagePicker.DismissModalViewControllerAnimated(true);
			textViewInput.UserInteractionEnabled = false;
			inputUserName = inputAboutMe = false;
			imagePicker.DismissViewControllerAsync(true);
		}

        partial void btnCancel_TouchUpInside(NSObject sender)
        {
            if (inputUserName)
            {
                lblUserName.Text = startTextView;
            }

            if (inputAboutMe)
            {
                lblAboutMe.Text = startTextView;
            }

            if (lblGender.Text == "Male")
            {
                rBtnMale.State = true;
                rBtnFemale.State = rBtnUndisclosed.State = false;
            }
            else if (lblGender.Text == "Female")
            {
                rBtnFemale.State = true;
                rBtnMale.State = rBtnUndisclosed.State = false;
            }
            else
            {
                rBtnUndisclosed.State = true;
                rBtnFemale.State = rBtnMale.State = false;
            }

            inputUserName = inputAboutMe = false;
			textViewInput.UserInteractionEnabled = false;
            viewSetting.Hidden = viewSelectGender.Hidden = btnDone.Hidden = true;
        }

        partial void btnDone_TouchUpInside(NSObject sender)
        {
            if (inputAboutMe)
            {
                if (lblAboutMe.Text != "Write a bit about yourself" && lblAboutMe.Text != "")
                {
                    lblAboutMe.TextColor = UIColor.FromRGB(123, 131, 136);
                }
                else
                {
                    lblAboutMe.Text = "Write a bit about yourself";
					lblAboutMe.TextColor = UIColor.FromRGB(189, 195, 200);
				}
            }

            textViewInput.UserInteractionEnabled = false;
            inputUserName = inputAboutMe = false;

            if (rBtnMale.State)
            {
                lblGender.Text = "Male";
            }
            else if (rBtnFemale.State)
            {
                lblGender.Text = "Female";
            }
            else
            {
                lblGender.Text = "Undisclosed";
            }

            viewSetting.Hidden = viewSelectGender.Hidden = btnDone.Hidden = true;
        }

        partial void btnEditName_TouchUpInside(NSObject sender)
        {
            textViewInput.UserInteractionEnabled = true;
            inputUserName = true;
            this.NavigationController.NavigationBarHidden = true;
            viewSetting.Hidden = false;
            startTextView = textViewInput.Text = lblUserName.Text;
        }

        partial void btnAboutMe_TouchUpInside(NSObject sender)
        {
            textViewInput.UserInteractionEnabled = true;
            inputAboutMe = true;
			this.NavigationController.NavigationBarHidden = true;
			viewSetting.Hidden = false;
            startTextView = textViewInput.Text = lblAboutMe.Text;
        }

        partial void btnClearData_TouchUpInside(NSObject sender)
        {
			var alert = UIAlertController.Create("Clear Data Successful", "", UIAlertControllerStyle.Alert);
			alert.AddAction(UIAlertAction.Create("Ok", UIAlertActionStyle.Default, null));
			PresentViewController(alert, true, null);
        }

        bool HandleUITextViewChange(UITextView textView, NSRange range, string text)
        {
            if (inputUserName)
            {
                if (textViewInput.Text != startTextView)
                {
                    btnDone.Hidden = false;
                    lblUserName.Text = textViewInput.Text;
                }
            }

            if (inputAboutMe)
			{
                if (textViewInput.Text != startTextView && textViewInput.Text != "")
				{
					btnDone.Hidden = false;
                    lblAboutMe.Text = textViewInput.Text;
				}
			}

            return true;
        }

        partial void btnGender_TouchUpInside(NSObject sender)
        {
			this.NavigationController.NavigationBarHidden = true;
			viewSetting.Hidden = false;
            viewSelectGender.Hidden = false;
            			
			UITapGestureRecognizer tapGrMale = new UITapGestureRecognizer(() => {
                if (!rBtnMale.State)
                {
                    rBtnMale.State = true;
                    //lblGender.Text = "Male";
                    rBtnFemale.State = rBtnUndisclosed.State = btnDone.Hidden = false;
                }
			});

			UITapGestureRecognizer tapGrFemale = new UITapGestureRecognizer(() => {
                if (!rBtnFemale.State)
				{
                    rBtnFemale.State = true;
					//lblGender.Text = "Female";
                    rBtnMale.State = rBtnUndisclosed.State = btnDone.Hidden = false;
				}
			});

			UITapGestureRecognizer tapGrUndisclosed = new UITapGestureRecognizer(() => {
				if (!rBtnUndisclosed.State)
				{
					rBtnUndisclosed.State = true;
					//lblGender.Text = "Undisclosed";
                    rBtnMale.State = rBtnFemale.State = btnDone.Hidden = false;
				}
			});

			viewRadioButton1.Add(rBtnMale);
            viewRadioButton1.AddGestureRecognizer(tapGrMale);

            viewRadioButton2.Add(rBtnFemale);
            viewRadioButton2.AddGestureRecognizer(tapGrFemale);

			viewRadioButton3.Add(rBtnUndisclosed);
            viewRadioButton3.AddGestureRecognizer(tapGrUndisclosed);
        }

        partial void btnVoucherCode_TouchUpInside(NSObject sender)
        {
			//Create Alert
            textInputAlertController = UIAlertController.Create("Redeem a voucher", "Inset your voucher code:", UIAlertControllerStyle.Alert);

			//Add Text Input
			textInputAlertController.AddTextField(textField => {
			});

			//Add Actions
            var cancelAction = UIAlertAction.Create("Cancel", UIAlertActionStyle.Destructive, null);
            var okayAction = UIAlertAction.Create("Submit", UIAlertActionStyle.Default, SubmitHandleAction);

			textInputAlertController.AddAction(cancelAction);
			textInputAlertController.AddAction(okayAction);

			//Present Alert
			PresentViewController(textInputAlertController, true, null);
		}

        void SubmitHandleAction(UIAlertAction obj)
        {
            var alert = UIAlertController.Create("Submit Successful", textInputAlertController.TextFields[0].Text, UIAlertControllerStyle.Alert);
			alert.AddAction(UIAlertAction.Create("Ok", UIAlertActionStyle.Default, null));
			PresentViewController(alert, true, null);
        }
    }
}
