// This file has been autogenerated from a class added in the UI designer.

using System;
using AVFoundation;
using CoreGraphics;
using Foundation;
using MvvmCross.Binding.BindingContext;
using MvvmCross.Binding.iOS.Views;
using Naxam.Busuu.Core.Converter;
using Naxam.Busuu.Core.Models;
using PatridgeDev;
using UIKit;

namespace Naxam.Busuu.iOS.Profile.Cells
{
	public partial class ProfileStaticCell : MvxTableViewCell
	{
        public event EventHandler<SocialModel> ViewProfileHandler;

		PDRatingView ratingView;
		readonly MvxImageViewLoader _loaderImageUser;
		readonly MvxImageViewLoader _loaderImgLearn;

		AVAudioPlayer SpeakMusicPlayer;
		NSTimer update_timer;
		string fileUrl;

		UIImage playBtnBg, pauseBtnBg;

		public ProfileStaticCell(IntPtr handle) : base(handle)
        {
			_loaderImageUser = new MvxImageViewLoader(() => this.imgUserAvatar);
            _loaderImageUser.DefaultImagePath = "res:user_avatar_placeholder.png";

			_loaderImgLearn = new MvxImageViewLoader(() => this.imgLan);
            _loaderImgLearn.DefaultImagePath = "res:list_flagcut_enc.png";

			this.DelayBind(() =>
			{
                var setBinding = this.CreateBindingSet<ProfileStaticCell, SocialModel>();
                setBinding.Bind(_loaderImageUser).To(f => f.User.Photo);
                setBinding.Bind(lblUserName).To(f => f.User.Name);
                setBinding.Bind(lblCountry).To(f => f.User.Country.Country);
                setBinding.Bind(_loaderImgLearn).To(f => f.ImageLearn);
                setBinding.Bind(lblTimePublic).To(f => f.DatePosted).WithConversion(nameof(PostedToStringConverter));			
                setBinding.Bind(WriteText).To(f => f.Content);
			    setBinding.Apply();
			});

			playBtnBg = UIImage.FromFile("play_btn.png");
			pauseBtnBg = UIImage.FromFile("pause_btn.png");
		}

		public override void AwakeFromNib()
		{
			base.AwakeFromNib();

			audioViewTopConstraint.Active = false;
			audioViewBottomConstraint.Active = false;
            ViewAudioPlayer.Layer.Hidden = true;

			imgUserAvatar.Layer.CornerRadius = imgUserAvatar.Frame.Width / 2;

			ViewAudioPlayer.Layer.CornerRadius = 2;

			ButtonAudioPlay.Layer.CornerRadius = ButtonAudioPlay.Frame.Width / 2;
			ButtonAudioPlay.ImageEdgeInsets = new UIEdgeInsets(10, 12, 10, 10);

			var img = UIImage.FromBundle("play_icon_small");
			SliderSpeak.SetThumbImage(img, UIControlState.Normal);
			SliderSpeak.SetThumbImage(img, UIControlState.Selected);
			SliderSpeak.SetThumbImage(img, UIControlState.Highlighted);

			ViewBackGroud.Layer.ShadowRadius = 1;
			ViewBackGroud.Layer.ShadowOpacity = 0.25f;
			ViewBackGroud.Layer.ShadowOffset = new CGSize(0, 1);

			var ratingConfig = new RatingConfig(UIImage.FromBundle("Stars" + "/grey_star2"),
									UIImage.FromBundle("Stars" + "/yellow_star_d"),
									UIImage.FromBundle("Stars" + "/yellow_star_d"));

			ratingConfig.ItemPadding = 1;
			var ratingFrame = new CGRect(CGPoint.Empty, new CGSize(95, 20));

			ratingView = new PDRatingView(ratingFrame, ratingConfig);

			ViewRate.Add(ratingView);
			ViewRate.SendSubviewToBack(ratingView);
		}

		public override void LayoutSubviews()
		{
			base.LayoutSubviews();

            try
            {
				string[] arrPathfile = WriteText.Text.Split('.');
				if (arrPathfile.Length == 2)
				{
					var fileUrl2 = NSBundle.MainBundle.PathForResource(arrPathfile[0], arrPathfile[1]);
					if ((fileUrl2 != null) && (fileUrl != fileUrl2))
					{
						fileUrl = fileUrl2;
						Uri songURL = new NSUrl(fileUrl);
						SpeakMusicPlayer = AVAudioPlayer.FromUrl(songURL);
						SpeakMusicPlayer.Volume = 1;
						SpeakMusicPlayer.NumberOfLoops = 0;
						SpeakMusicPlayer.FinishedPlaying -= SpeakMusicPlayer_FinishedPlaying;
						SpeakMusicPlayer.FinishedPlaying += SpeakMusicPlayer_FinishedPlaying;
						UpdateViewForPlayerInfo();
						UpdateViewForPlayerState();
					}
				}
				else
				{
					if (SpeakMusicPlayer != null)
						SpeakMusicPlayer.Pause();
				}
            }
            catch {}
		}

		void SpeakMusicPlayer_FinishedPlaying(object sender, AVStatusEventArgs e)
		{
			UpdateViewForPlayerInfo();
			UpdateViewForPlayerState();
		}

		partial void ButtonRate_TouchUpInside(NSObject sender)
		{
            ViewProfileHandler.Invoke(this, (SocialModel)DataContext);
		}

		partial void ButtonAudioPlay_TouchUpInside(NSObject sender)
		{
			if (SpeakMusicPlayer.Playing)
			{
				PausePlayback();
			}
			else
			{
				StartPlayback();
			}
		}

		void UpdateCurrentTime()
		{
			if (SpeakMusicPlayer.Playing)
			{
				ButtonAudioPlay.ImageEdgeInsets = new UIEdgeInsets(10, 10, 10, 10);
				ButtonAudioPlay.SetImage(pauseBtnBg, UIControlState.Normal);
				var min = (int)((SpeakMusicPlayer.Duration - SpeakMusicPlayer.CurrentTime) / 60);
				var sec = (int)((SpeakMusicPlayer.Duration - SpeakMusicPlayer.CurrentTime) % 60);
				lblTime.Text = String.Format("{0:D2}:{1:D2}", min, sec);
				SliderSpeak.Value = (float)SpeakMusicPlayer.CurrentTime;
			}
			else
			{
				ButtonAudioPlay.SetImage(playBtnBg, UIControlState.Normal);
			}
		}

		void UpdateViewForPlayerState()
		{
			if (SpeakMusicPlayer.Playing)
			{
				ButtonAudioPlay.ImageEdgeInsets = new UIEdgeInsets(10, 10, 10, 10);
				ButtonAudioPlay.SetImage(pauseBtnBg, UIControlState.Normal);

                if (update_timer == null)
                {
					InvokeOnMainThread(() =>
					{
						update_timer = NSTimer.CreateRepeatingScheduledTimer(TimeSpan.FromSeconds(0.01), delegate
						{
							UpdateCurrentTime();
						});
					});
                }
			}
			else
			{
				ButtonAudioPlay.ImageEdgeInsets = new UIEdgeInsets(10, 12, 10, 10);
				ButtonAudioPlay.SetImage(playBtnBg, UIControlState.Normal);
				if (update_timer != null)
				{
					update_timer.Invalidate();
					update_timer = null;
				}
			}
		}

		void UpdateViewForPlayerInfo()
		{
			SliderSpeak.Value = 0;
			SliderSpeak.MaxValue = (float)SpeakMusicPlayer.Duration;
			lblTime.Text = String.Format("{0:00}:{1:00}", (int)SpeakMusicPlayer.Duration / 60, (int)SpeakMusicPlayer.Duration % 60);
		}

		void PausePlayback()
		{
			SpeakMusicPlayer.Pause();
			UpdateViewForPlayerState();
		}

		void StartPlayback()
		{
			SpeakMusicPlayer.Play();
			UpdateViewForPlayerState();
		}
	}
}
